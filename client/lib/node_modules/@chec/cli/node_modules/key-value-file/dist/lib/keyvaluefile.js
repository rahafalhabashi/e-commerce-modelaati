"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyValueFile = void 0;
const keyvalue_1 = require("./keyvalue");
const fs_1 = require("./fs");
const tokenize_1 = require("./tokenize");
/**
 * Read/write a key/value file
 */
class KeyValueFile extends keyvalue_1.KeyValue {
    /**
     * Constructor
     *
     * @param path The path of the key/value file
     * @param tokens The tokens of the file {@see tokenize:tokenize()|tokenize()}
     */
    constructor(path, tokens) {
        super(tokens);
        this._path = path;
    }
    /** Returns the path of the key/value file */
    get path() {
        return this._path;
    }
    /**
     * Creates an instance of {@link KeyValueFile}. If `path` exists it is
     * loaded.
     */
    static async create(path) {
        let tokens;
        if (await fs_1.exists(path)) {
            const data = await fs_1.readFile(path);
            tokens = tokenize_1.tokenize(data);
        }
        return new this(path, tokens);
    }
    /**
     * Save the file to disk
     * @param collapseWhitespace If `true` all unnecessary whitespace will
     * be removed
     * @param options Options passed to {@link
     *  https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback | fs.writeFile}
     */
    async writeFile(collapseWhitespace = false, options) {
        const data = this.toString(collapseWhitespace);
        await fs_1.writeFile(this._path, data, options);
        return this;
    }
}
exports.KeyValueFile = KeyValueFile;
//# sourceMappingURL=keyvaluefile.js.map