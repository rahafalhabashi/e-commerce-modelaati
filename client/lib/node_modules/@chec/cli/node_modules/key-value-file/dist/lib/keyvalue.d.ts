import { Token } from './token';
import { Maybe } from './types';
/**
 * Class for manipulating key/value data (`.env` files f.ex)
 */
export declare class KeyValue {
    private _tokens;
    /**
     * Constructor
     * @param tokens {@see tokenize:tokenize|tokenize()}
     */
    constructor(tokens?: Token[]);
    /**
     * Returns the value of key `key`
     * @param key The key to get the value for
     * @returns `undefined` if the `key` is not found
     */
    get(key: string): Maybe<string>;
    /**
     * Set the value of key `key`. If the `key` doesn't exist it's created
     * @param key
     * @param value
     * @returns The instance being called
     */
    set(key: string, value: string | number): this;
    /**
     * Rename the key `key` to `newName`
     * @param key The name of the key to rename
     * @param newName The new name of the key
     * @returns The instance being called
     */
    rename(key: string, newName: string): this;
    /**
     * Delete the key `key`
     * @param key The name of the key to delete
     * @returns The instance being called
     */
    delete(key: string): this;
    /**
     * Add new newline token
     */
    addNewline(): this;
    /**
     * Add a comment node.
     *
     * Note! The comment should not have a leading `#`.
     * The comment can be multi-line
     * @param comment
     */
    addComment(comment: string): this;
    /**
     * Remove all comment tokens
     */
    removeComments(): this;
    /**
     * Stringify the tokens
     * @param collapseWhitespace If `true` all whitespaces, except newlines,
     * will be removed
     */
    toString(collapseWhitespace?: boolean): string;
    /**
     * Check if the comment at `pos` is a trailing comment or not
     * @param pos
     */
    protected isTrailingComment(pos: number): boolean;
    /**
     * Check if we need no add a newline before adding a new key/value pair
     */
    protected addNewlineBeforeNewValue(): void;
    /**
     * Push a newline token
     */
    protected pushNewlineToken(): this;
    /**
     * Get the key token with name `key`
     * @param key
     */
    protected getKey(key: string): Maybe<Token>;
    /**
     * Returns the index of the key token with name `key`
     * @param key
     */
    protected getKeyIndex(key: string): number;
    /**
     * Remove all unnecessary whitespace tokens
     */
    protected collapseWhitespace(): Token[];
    /**
     * Returns the value token for key `key`
     * @param key
     */
    protected getValueForKey(key: string): Maybe<Token>;
}
